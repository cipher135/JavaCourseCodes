---- Generics ---
*) introduced in Java 5, Generics are used for creating interfaces, methods, and classes that specify the object type on which they work as a parameter(usually one of the E (element), T (type), K (key), N(number) and V (value)). and provide the following advantages:

- Compile-time type checking is done
- Casting is eliminated
- Can implement Generic algorithms

syntax: class class-name<type-parameter-list> {}

* creating and invoking generic methods

class UserInterface {
    public static <E> void display(E[] list) {    // generic method displaying the elements of an array
        for (int i = 0; i < list.length; i++)
            System.out.println(list[i] + ", ");
    }
    public static void main(String[] args) {
    	String[] cities = {"Bengaluru", "Chennai"};
    	Integer[] codes = {12,14,15};
    	UserInterface.display(codes);
    	UserInterface.display(cities);
    	
	}
    
}


--- update method to update student record in DB

public static void update(Record<Student> studentRecord) {
        // Code to update the records
}

In this case, Record is a generic class/interface, and Student is the type argument specified for that class/interface.
** DayScholar and Hosteller are subtype of Student class. 
Object is super class of all classes
--- wildcard constructs to denote a family of types---

1. ? extends T - Upper-bounded wildcard which supports types that are T or its sub-types.

public static void update(Record<? extends Student> studentRecord) {
        // Code to update the records
}
The method above will accept parameters of type Record<Student>, Record<DayScholar> and Record<Hosteller>.

2. ? super T - Lower-bounded wildcard which supports types that are T or its super-types.

public static void update(Record<? super DayScholar> studentRecord) {
        // Code to update the records
}

The method above will accept parameters of type Record<Student>, Record<DayScholar> and Record<Object>

3. ? - Unbounded wildcard which supports all types.

public static void update(Record<?> studentRecord) {
        // Code to update the records
}
The method mentioned above will accept parameters of type Record<Student>, Record<Professor>, Record<Object>, etc.


----- Collections Framework -------
even though arrays have type check at complie time & can hold objects or primitive types, they have fixed size and cant
grow or shrink at run time. but LIST can. Collections framework offers many interfaces and classes for manipulating and
 representing collections.
---REFER TO IMAGE

- Collections.sort() method can sort the elements of a list in their natural order.
- like sort(), Collections class contains several other utility methods like reverse(), shuffle(), swap(), etc.
- Collections.sort() will work on any kind of element which implements the Comparable interface.

public class Course implements Comparable<Course> {
    public int courseId;
    public String courseName;
 
    public Course(int courseId, String courseName) {
        this.courseId = courseId;
        this.courseName = courseName;
    }
 
    @Override
    public int compareTo(Course otherCourse) {
        return this.courseName.compareTo(otherCourse.courseName);
    }
 
    @Override
    public String toString() {
        return this.courseId + ":" + this.courseName;
    }
}

- now we can use sort method on this user-defined class
- TreeSet and TreeMap classes automatically use the compareTo() method to sort elements when they are added.
- suppose we want to sort based on courseId not courseName, Since our Course class already 
  implements compareTo() to sort according to the courseName, we'll need an additional component to define 
  another comparison logic.

public class CourseIdComparator implements Comparator<Course> {
    @Override
    public int compare(Course c1, Course c2) {
        return c1.courseId - c2.courseId;
    }
}
---
---
Collections.sort(courseList, new CourseIdComparator());
TreeSet<Course> courseSet = new TreeSet<>(new CourseIdComparator());


>>> REGULAR EXPRESSIONS : java.util.regex <<<
- a sequence of characters that form a search pattern. mainly used in pattern matching for searching and editing.
- regex is used by the String class in four methods: matches(), split(), replaceFirst(), replaceAll()

Meta Characters:
[]	create a character class to match a single character contained within the brackets.
	'-' can be used to specify a range. E.g: [xyz] matches 'x', 'y' or 'z'. [a-z] matches any letter from 'a' to 'z'.

.	Matches any single character, except a newline. Inside a bracket expression, it becomes a literal dot.
	e.g. b.t matches "bat", "bRt", "b8t", etc.
[^]	Matches a single character that is not within the brackets.	[^xyz] matches 'a', '6', etc.
|	"or" expression to match alternatives.	batlcat matches "bat" or "cat".
()	Group expressions to form sub-expressions. Also used to capture groups.	Ma(nn|tt)er matches "Matter" or "Manner".
\n	Matches the nth captured sub-expression group. Groups are numbered from left to right.	([a-z])\\1 matches "dd", "hh", etc.

QUANTIFIERS:
?	Matches the preceding element zero or one time.		Ba?t matches "Bat" and "Bt".
*	Matches the preceding element zero or more times.	10*1 matches "11","1001",etc.
+	Matches the preceding element one or more times.	10+1 matches "101","1001",etc.
{m}	Matches the preceding element exactly m times.		10{4}1 matches "100001".
{m,}	Matches the preceding element m or more times.		10{3,}1 matches "10001", "1000001", "100000001", etc.
{m,n}	Matches the preceding element Minimum m and Maximum n times.	xy{2,3}z matches "xyyz","xyyyz".

Predefined Character Classes
\w	Alphanumeric characters and the underscores	[A-Za-z0-9_]
\W	Non-word characters				[^A-Za-z0-9_]
\d	Digits						[0-9]
\D	Non-digits					[^0-9]
\s	Whitespace characters				[\t\n\f\r]
\S	Non-whitespace characters			[^\t\n\f\r]

Note: "\w" is a metacharacter. But '\' is an escape character in Java. Therefore, 
with another backslash, we have to escape it. Ex: "[ \\w]+ ".

public boolean validateName(String name) {
    Pattern regex = Pattern.compile("([A-Za-z]+\\s?)+");
    Matcher nameMatcher = regex.matcher(name.trim());
    return nameMatcher.matches();
}


>>>>> I/O Stream API <<<<<<
Stream type:
a) Byte stream - works with image, audio, video ... access files byte by byte(8bits)
   Abstract classes of stream: InputStream OutputStream (from java.io)
b) Character stream - work with files containing Unicode characters which may be represented by two or more bytes.
   It accesses the file character by character
   Abstract classes of stream: Reader  & Writer
* PrintStream is the most commonly used System.out type
... 




